com.example.mymuzic/
│
├── di/                     <- Koin/Hilt module
│   └── AppModule.kt
│
├── data/
│   ├── model/             <- Dữ liệu thô từ API (DTO)
│   ├── remote/            <- API interface (Retrofit/Ktor)
│   └── repository/        <- Triển khai repository
│
├── domain/
│   ├── model/             <- Dữ liệu dùng trong app (UI model)
│   ├── repository/        <- Interface repository
│   └── usecase/           <- Business logic
│
├── presentation/
│   ├── navigation/        <- NavHost, route names
│   ├── screen/
│   │   └── home/          <- UI + ViewModel màn home
│   └── ui/                <- Component tái sử dụng (PlayerControl, TrackCard,…)
│
├── MainActivity.kt
└── MyMuzicApp.kt          <- Composable root App + NavHost


/////
Client ID spotity
c227a0aaa5d54c4881c1ad98e8dad3ec

Client secret
bad18f3d1fb2479e9a954a036f111af0


//// cấu trúc app 
🏠 1. Home Screen
TỔNG QUÁT
Mục tiêu: Là trung tâm hiển thị nội dung chính, tích hợp thêm tính năng profile và điều khiển nhanh nhạc.

Thành phần chính:

🔹 Header:

Avatar người dùng (ấn vào để mở trang profile hoặc settings).

Chào buổi sáng/chiều (tùy thời gian).

🔹 Recently Played (lấy từ Spotify GET /me/player/recently-played)

🔹 Top Tracks & Artists (dùng GET /me/top/artists, GET /me/top/tracks)

🔹 Quick Controls:

Nhạc đang phát gần đây + nút Play/Pause.

Seekbar đơn giản.

Tên bài hát + artist.
🎧 MÀN HÌNH HOME – CẤU TRÚC CHI TIẾT
🎯 Mục tiêu chính:
Chào đón người dùng

Hiển thị nội dung được cá nhân hóa (theo API Spotify)

Truy cập nhanh đến các phần như Profile, Player, Track đang nghe

📦 Thành phần UI chính:
1. 🔝 Header:
Avatar người dùng (Spotify profile image) → khi nhấn sẽ mở Profile

Tên người dùng

Nút tìm kiếm (có thể điều hướng sang Explore hoặc mở Search inline)

2. 🎶 "Tiếp tục nghe":
Hiển thị danh sách track hoặc album user đang nghe dở

API: GET https://api.spotify.com/v1/me/player/recently-played

3. 💡 Gợi ý cá nhân hóa:
Section: "Đề xuất cho bạn"

API: GET https://api.spotify.com/v1/recommendations

Có thể dùng genres hoặc top tracks của user làm input

4. 💽 Album / Playlist yêu thích:
Lấy từ GET https://api.spotify.com/v1/me/albums và .../playlists

5. 🔊 Trình phát mini (Mini Player):
Nếu đang nghe bài hát, hiện 1 thanh ở dưới:

Tên bài hát

Artist

Nút play/pause

Khi nhấn vào sẽ mở full player (hoặc điều hướng sang 1 composable full-screen player)

💬 Luồng logic:
Khi mở Home:

Lấy access token từ local storage hoặc request mới nếu hết hạn

Gọi các API: recently-played, recommendations, playlists, profile

Render UI theo thứ tự: Header → Sections

Nếu chưa đăng nhập → chuyển sang màn SignIn (tuỳ cấu trúc)

🛠 Kỹ thuật:
Nên dùng:

Paging 3 (nếu section nhiều dữ liệu)

StateFlow để cập nhật theo thời gian thực

Retrofit + Interceptor để gắn token vào headers

UI: Jetpack Compose



🔍 2. Explore Screen
TỔNG QUÁT
Mục tiêu: Cho phép người dùng tìm kiếm và khám phá nhạc mới.

Thành phần chính:

🔹 SearchBar (dùng GET /search?q=...)

Có thể tìm theo track, artist, album.

🔹 Category Slider (Pop, EDM, Chill,... dùng GET /browse/categories)

🔹 New Releases (dùng GET /browse/new-releases)

🔹 Featured Playlists (dùng GET /browse/featured-playlists)

🔍 MÀN HÌNH EXPLORE – CẤU TRÚC CHI TIẾT
🎯 Mục tiêu chính:
Giúp người dùng khám phá nhạc mới theo chủ đề, thể loại, mood, nghệ sĩ hot...

Tạo cảm giác "khám phá không giới hạn" như Spotify hoặc Zing MP3

📦 Thành phần UI:
1. 🔎 Thanh Tìm kiếm (Search Bar):
Người dùng nhập từ khoá (tên bài hát, nghệ sĩ, album…)

Khi nhập sẽ gọi:

bash
Sao chép
Chỉnh sửa
GET https://api.spotify.com/v1/search?q={keyword}&type=track,artist,album
Có thể chuyển sang màn SearchResultScreen (hoặc inline dropdown)

2. 🧩 Thể loại (Genres):
Hiển thị các thể loại như Pop, Rock, EDM, Jazz...

API:

bash
Sao chép
Chỉnh sửa
GET https://api.spotify.com/v1/recommendations/available-genre-seeds
Nhấn vào 1 genre → navigate sang GenreDetailScreen → hiển thị các track/playlist liên quan

3. 🧠 Mood hoặc Context Cards (Tùy chọn):
Ví dụ: "Tập trung", "Thư giãn", "Tập gym", "Lãng mạn"...

Spotify không có API mood trực tiếp, nhưng bạn có thể giả lập bằng playlist theo mood:

bash
Sao chép
Chỉnh sửa
GET https://api.spotify.com/v1/browse/categories
hoặc dùng:

bash
Sao chép
Chỉnh sửa
GET https://api.spotify.com/v1/browse/featured-playlists
4. 📈 Top Charts / Trending:
Ví dụ: "Top Vietnam", "Top Global"

API:

bash
Sao chép
Chỉnh sửa
GET https://api.spotify.com/v1/browse/categories/{category_id}/playlists
hoặc dùng featured playlists

5. 👨‍🎤 Nghệ sĩ nổi bật / mới nổi (Optional):
API: Không có cụ thể, nhưng bạn có thể lấy từ trending hoặc hardcode artist ID vào app nếu cần

💡 UX Detail:
Các item có thể hiển thị theo card:

Hình ảnh (playlist / genre / artist)

Tên

Khi nhấn → mở màn mới chi tiết theo loại dữ liệu

💬 Logic hoạt động:
Khi vào màn Explore:

Gọi API để lấy danh sách genre

Gọi danh sách playlist nổi bật

Có thể gọi thêm recommended playlists

Khi user chọn genre, playlist, artist → mở màn chi tiết tương ứng (có thể reuse cùng 1 màn cho tất cả)


📚 3. Library Screen

TỔNG QUÁT

Mục tiêu: Hiển thị các bài hát, playlist và album mà người dùng đã lưu.

Thành phần chính:

🔹 Your Playlists (GET /me/playlists)

🔹 Saved Tracks (GET /me/tracks)

🔹 Saved Albums (GET /me/albums)

🔹 Lọc theo loại nội dung (playlist, track, album)

📚 MÀN HÌNH LIBRARY – CHI TIẾT
🎯 Mục tiêu:
Cho phép người dùng quản lý:

Bài hát đã thích (Liked Songs)

Playlist của chính họ

Album & nghệ sĩ đã lưu

(Optional) Lịch sử nghe gần đây

Tất cả đều gọi được từ Spotify Web API — nhưng cần token người dùng, không phải client credentials.

📦 Thành phần UI:
1. 👤 Thông tin tài khoản (tùy chọn)
Avatar + tên + nút "Xem hồ sơ"

Dùng:

bash
Sao chép
Chỉnh sửa
GET https://api.spotify.com/v1/me
2. ❤️ Bài hát yêu thích (Liked Songs)
Tên: "Liked Songs" hoặc "Bài hát đã thích"

Gọi API:

bash
Sao chép
Chỉnh sửa
GET https://api.spotify.com/v1/me/tracks
Trả về list bài hát user đã "thả tim"

3. 📂 Playlist của tôi
Gọi:

bash
Sao chép
Chỉnh sửa
GET https://api.spotify.com/v1/me/playlists
Mỗi playlist có ảnh, tên, số lượng bài hát

4. 📀 Album đã lưu
Gọi:

bash
Sao chép
Chỉnh sửa
GET https://api.spotify.com/v1/me/albums
5. 🎤 Nghệ sĩ đã theo dõi
Gọi:

bash
Sao chép
Chỉnh sửa
GET https://api.spotify.com/v1/me/following?type=artist
6. 🕒 Lịch sử nghe gần đây (nếu muốn)
Gọi:

bash
Sao chép
Chỉnh sửa
GET https://api.spotify.com/v1/me/player/recently-played
⚠️ API này cần scope user-read-recently-played, nên chỉ hoạt động nếu user đã login qua OAuth đúng cách.




🔐 Luồng đăng nhập với Spotify bằng PKCE
Khi người dùng mở ứng dụng và nhấn nút "Đăng nhập với Spotify", ứng dụng sẽ thực hiện quy trình đăng nhập theo chuẩn PKCE như sau:

Tạo code_verifier và code_challenge
Ứng dụng tạo một chuỗi ngẫu nhiên gọi là code_verifier, sau đó dùng SHA-256 để băm chuỗi này và chuyển kết quả sang dạng base64url, tạo thành code_challenge.

Mở trang đăng nhập Spotify
Ứng dụng điều hướng người dùng đến trang ủy quyền của Spotify (https://accounts.spotify.com/authorize), kèm theo các tham số như client_id, redirect_uri, code_challenge, response_type=code, và các quyền (scope) mà ứng dụng yêu cầu.
Người dùng sẽ đăng nhập Spotify và đồng ý cấp quyền.

Spotify chuyển hướng trở lại ứng dụng kèm theo mã authorization code
Sau khi người dùng đồng ý, Spotify sẽ redirect về redirect_uri mà ứng dụng đã đăng ký ( com.example.mymuzic://callback) kèm theo tham số code=.... Ứng dụng sẽ lấy mã này để thực hiện bước tiếp theo.

Đổi mã authorization code lấy access token
Ứng dụng gửi một HTTP POST request đến https://accounts.spotify.com/api/token, với các thông tin: client_id, grant_type=authorization_code, code (vừa nhận được), redirect_uri, và code_verifier ban đầu.
Nếu thành công, Spotify sẽ trả về access_token (và thường là cả refresh_token).

Lưu token và chuyển sang trang chính (Home)
Ứng dụng lưu access_token để sử dụng cho các lần gọi Spotify API sau này, ví dụ: lấy thông tin người dùng, phát nhạc, truy cập playlist,... Sau đó ứng dụng sẽ chuyển người dùng sang trang chính (Home screen) và sử dụng token đã nhận để gọi các API cần thiết.

// chạy nhạc spotify remote ( code tham khảo)
package com.yourdomain.yourapp;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;

import android.util.Log;

import com.spotify.android.appremote.api.ConnectionParams;
import com.spotify.android.appremote.api.Connector;
import com.spotify.android.appremote.api.SpotifyAppRemote;

import com.spotify.protocol.client.Subscription;
import com.spotify.protocol.types.PlayerState;
import com.spotify.protocol.types.Track;

class MainActivity : AppCompatActivity() {

    private val clientId = "ad0911afa57949bba362003f601876b2"
    private val redirectUri = "https://com.spotify.android.spotifysdkkotlindemo/callback"
    private var spotifyAppRemote: SpotifyAppRemote? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
    }

    override fun onStart() {
        super.onStart()
        val connectionParams = ConnectionParams.Builder(clientId)
            .setRedirectUri(redirectUri)
            .showAuthView(true)
            .build()

        SpotifyAppRemote.connect(this, connectionParams, object : Connector.ConnectionListener {
            override fun onConnected(appRemote: SpotifyAppRemote) {
                spotifyAppRemote = appRemote
                Log.d("MainActivity", "Connected! Yay!")
                // Now you can start interacting with App Remote
                connected()
            }

            override fun onFailure(throwable: Throwable) {
                Log.e("MainActivity", throwable.message, throwable)
                // Something went wrong when attempting to connect! Handle errors here
            }
        })
    }

    private fun connected() {
        spotifyAppRemote?.let {
            // Play a playlist
            val playlistURI = "spotify:playlist:37i9dQZF1DX2sUQwD7tbmL"
            it.playerApi.play(playlistURI)
            // Subscribe to PlayerState
            it.playerApi.subscribeToPlayerState().setEventCallback {
                val track: Track = it.track
                Log.d("MainActivity", track.name + " by " + track.artist.name)
            }
        }

    }

    override fun onStop() {
        super.onStop()
        spotifyAppRemote?.let {
            SpotifyAppRemote.disconnect(it)
        }

    }
}